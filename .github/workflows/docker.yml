name: Build and Push Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"

env:
  REGISTRY_IMAGE: shenlw/morphic

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_version.outputs.should_run }}
      version: ${{ steps.check_version.outputs.version }}
    steps:
      - name: Get latest release version
        id: check_version
        run: |
          VERSION_TAG=$(curl -s https://api.github.com/repos/miurla/morphic/releases/latest | jq -r .tag_name)
          echo "version=${VERSION_TAG}" >> $GITHUB_OUTPUT

          # Check if this version exists on Docker Hub
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v2/repositories/shenlw/morphic/tags/${VERSION_TAG})

          if [ "$HTTP_CODE" = "404" ]; then
            echo "Version ${VERSION_TAG} does not exist, need to build"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Version ${VERSION_TAG} already exists, skipping build"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check
    if: needs.check.outputs.should_run == 'true'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} Image
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "VERSION_TAG=${{ needs.check.outputs.version }}" >> $GITHUB_ENV

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and export
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          context: .
          build-args: |
            GIT_TAG=${{ env.VERSION_TAG }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          rm -rf /tmp/digests
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge
    needs: [check, build]
    if: needs.check.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digest-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set version from check job
        run: |
          echo "VERSION_TAG=${{ needs.check.outputs.version }}" >> $GITHUB_ENV

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            -t ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_TAG }} \
            -t ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION_TAG }}
